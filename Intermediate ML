{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e2ae14ca",
   "metadata": {
    "papermill": {
     "duration": 0.010258,
     "end_time": "2024-08-17T07:52:41.128774",
     "exception": false,
     "start_time": "2024-08-17T07:52:41.118516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intermediate Machine Learning](https://www.kaggle.com/learn/intermediate-machine-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/alexisbcook/introduction).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13738457",
   "metadata": {
    "papermill": {
     "duration": 0.008339,
     "end_time": "2024-08-17T07:52:41.145800",
     "exception": false,
     "start_time": "2024-08-17T07:52:41.137461",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As a warm-up, you'll review some machine learning fundamentals and submit your initial results to a Kaggle competition.\n",
    "\n",
    "# Setup\n",
    "\n",
    "The questions below will give you feedback on your work. Run the following cell to set up the feedback system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a0d8cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:41.170218Z",
     "iopub.status.busy": "2024-08-17T07:52:41.169685Z",
     "iopub.status.idle": "2024-08-17T07:52:43.678373Z",
     "shell.execute_reply": "2024-08-17T07:52:43.677089Z"
    },
    "papermill": {
     "duration": 2.526293,
     "end_time": "2024-08-17T07:52:43.680994",
     "exception": false,
     "start_time": "2024-08-17T07:52:41.154701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "# Set up code checking\n",
    "import os\n",
    "if not os.path.exists(\"../input/train.csv\"):\n",
    "    os.symlink(\"../input/home-data-for-ml-course/train.csv\", \"../input/train.csv\")  \n",
    "    os.symlink(\"../input/home-data-for-ml-course/test.csv\", \"../input/test.csv\")  \n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.ml_intermediate.ex1 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f73615ff",
   "metadata": {
    "papermill": {
     "duration": 0.008239,
     "end_time": "2024-08-17T07:52:43.697878",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.689639",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You will work with data from the [Housing Prices Competition for Kaggle Learn Users](https://www.kaggle.com/c/home-data-for-ml-course) to predict home prices in Iowa using 79 explanatory variables describing (almost) every aspect of the homes.  \n",
    "\n",
    "![Ames Housing dataset image](https://storage.googleapis.com/kaggle-media/learn/images/lTJVG4e.png)\n",
    "\n",
    "Run the next code cell without changes to load the training and validation features in `X_train` and `X_valid`, along with the prediction targets in `y_train` and `y_valid`.  The test features are loaded in `X_test`.  (_If you need to review **features** and **prediction targets**, please check out [this short tutorial](https://www.kaggle.com/dansbecker/your-first-machine-learning-model).  To read about model **validation**, look [here](https://www.kaggle.com/dansbecker/model-validation).  Alternatively, if you'd prefer to look through a full course to review all of these topics, start [here](https://www.kaggle.com/learn/machine-learning).)_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "31f7b002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:43.717273Z",
     "iopub.status.busy": "2024-08-17T07:52:43.716422Z",
     "iopub.status.idle": "2024-08-17T07:52:43.831206Z",
     "shell.execute_reply": "2024-08-17T07:52:43.830044Z"
    },
    "papermill": {
     "duration": 0.128122,
     "end_time": "2024-08-17T07:52:43.834565",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.706443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Read the data\n",
    "X_full = pd.read_csv('../input/train.csv', index_col='Id')\n",
    "X_test_full = pd.read_csv('../input/test.csv', index_col='Id')\n",
    "\n",
    "# Obtain target and predictors\n",
    "y = X_full.SalePrice\n",
    "features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\n",
    "X = X_full[features].copy()\n",
    "X_test = X_test_full[features].copy()\n",
    "\n",
    "# Break off validation set from training data\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n",
    "                                                      random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a55312f7",
   "metadata": {
    "papermill": {
     "duration": 0.00806,
     "end_time": "2024-08-17T07:52:43.851342",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.843282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Use the next cell to print the first several rows of the data. It's a nice way to get an overview of the data you will use in your price prediction model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "09077e46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:43.871479Z",
     "iopub.status.busy": "2024-08-17T07:52:43.870712Z",
     "iopub.status.idle": "2024-08-17T07:52:43.888120Z",
     "shell.execute_reply": "2024-08-17T07:52:43.887021Z"
    },
    "papermill": {
     "duration": 0.0313,
     "end_time": "2024-08-17T07:52:43.891190",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.859890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LotArea</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>619</th>\n",
       "      <td>11694</td>\n",
       "      <td>2007</td>\n",
       "      <td>1828</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>6600</td>\n",
       "      <td>1962</td>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>13360</td>\n",
       "      <td>1921</td>\n",
       "      <td>964</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>818</th>\n",
       "      <td>13265</td>\n",
       "      <td>2002</td>\n",
       "      <td>1689</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>13704</td>\n",
       "      <td>2001</td>\n",
       "      <td>1541</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     LotArea  YearBuilt  1stFlrSF  2ndFlrSF  FullBath  BedroomAbvGr  \\\n",
       "Id                                                                    \n",
       "619    11694       2007      1828         0         2             3   \n",
       "871     6600       1962       894         0         1             2   \n",
       "93     13360       1921       964         0         1             2   \n",
       "818    13265       2002      1689         0         2             3   \n",
       "303    13704       2001      1541         0         2             3   \n",
       "\n",
       "     TotRmsAbvGrd  \n",
       "Id                 \n",
       "619             9  \n",
       "871             5  \n",
       "93              5  \n",
       "818             7  \n",
       "303             6  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "effe62b2",
   "metadata": {
    "papermill": {
     "duration": 0.008957,
     "end_time": "2024-08-17T07:52:43.909087",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.900130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The next code cell defines five different random forest models.  Run this code cell without changes.  (_To review **random forests**, look [here](https://www.kaggle.com/dansbecker/random-forests)._)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c512b2c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:43.928978Z",
     "iopub.status.busy": "2024-08-17T07:52:43.927909Z",
     "iopub.status.idle": "2024-08-17T07:52:43.935884Z",
     "shell.execute_reply": "2024-08-17T07:52:43.934628Z"
    },
    "papermill": {
     "duration": 0.020486,
     "end_time": "2024-08-17T07:52:43.938261",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.917775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# Define the models\n",
    "model_1 = RandomForestRegressor(n_estimators=50, random_state=0)\n",
    "model_2 = RandomForestRegressor(n_estimators=100, random_state=0)\n",
    "model_3 = RandomForestRegressor(n_estimators=100, criterion='absolute_error', random_state=0)\n",
    "model_4 = RandomForestRegressor(n_estimators=200, min_samples_split=20, random_state=0)\n",
    "model_5 = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=0)\n",
    "\n",
    "models = [model_1, model_2, model_3, model_4, model_5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "512a0ab2",
   "metadata": {
    "papermill": {
     "duration": 0.00842,
     "end_time": "2024-08-17T07:52:43.955688",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.947268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To select the best model out of the five, we define a function `score_model()` below.  This function returns the mean absolute error (MAE) from the validation set.  Recall that the best model will obtain the lowest MAE.  (_To review **mean absolute error**, look [here](https://www.kaggle.com/dansbecker/model-validation).)_\n",
    "\n",
    "Run the code cell without changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c9ec8ec5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:43.974968Z",
     "iopub.status.busy": "2024-08-17T07:52:43.974517Z",
     "iopub.status.idle": "2024-08-17T07:52:49.422771Z",
     "shell.execute_reply": "2024-08-17T07:52:49.421572Z"
    },
    "papermill": {
     "duration": 5.460854,
     "end_time": "2024-08-17T07:52:49.425259",
     "exception": false,
     "start_time": "2024-08-17T07:52:43.964405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model 1 MAE: 24015\n",
      "Model 2 MAE: 23740\n",
      "Model 3 MAE: 23528\n",
      "Model 4 MAE: 23996\n",
      "Model 5 MAE: 23706\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "# Function for comparing different models\n",
    "def score_model(model, X_t=X_train, X_v=X_valid, y_t=y_train, y_v=y_valid):\n",
    "    model.fit(X_t, y_t)\n",
    "    preds = model.predict(X_v)\n",
    "    return mean_absolute_error(y_v, preds)\n",
    "\n",
    "for i in range(0, len(models)):\n",
    "    mae = score_model(models[i])\n",
    "    print(\"Model %d MAE: %d\" % (i+1, mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb78a5c1",
   "metadata": {
    "papermill": {
     "duration": 0.009202,
     "end_time": "2024-08-17T07:52:49.444406",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.435204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 1: Evaluate several models\n",
    "\n",
    "Use the above results to fill in the line below.  Which model is the best model?  Your answer should be one of `model_1`, `model_2`, `model_3`, `model_4`, or `model_5`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "636a3355",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.464945Z",
     "iopub.status.busy": "2024-08-17T07:52:49.464533Z",
     "iopub.status.idle": "2024-08-17T07:52:49.474242Z",
     "shell.execute_reply": "2024-08-17T07:52:49.473215Z"
    },
    "papermill": {
     "duration": 0.023016,
     "end_time": "2024-08-17T07:52:49.476708",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.453692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_BestModel\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Fill in the best model\n",
    "best_model = model_3\n",
    "\n",
    "# Check your answer\n",
    "step_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "10236ca5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.499039Z",
     "iopub.status.busy": "2024-08-17T07:52:49.498600Z",
     "iopub.status.idle": "2024-08-17T07:52:49.504010Z",
     "shell.execute_reply": "2024-08-17T07:52:49.502744Z"
    },
    "papermill": {
     "duration": 0.019657,
     "end_time": "2024-08-17T07:52:49.506905",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.487248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#step_1.hint()\n",
    "#step_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f4c7646",
   "metadata": {
    "papermill": {
     "duration": 0.009616,
     "end_time": "2024-08-17T07:52:49.527969",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.518353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 2: Generate test predictions\n",
    "\n",
    "Great. You know how to evaluate what makes an accurate model. Now it's time to go through the modeling process and make predictions. In the line below, create a Random Forest model with the variable name `my_model`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88ae6e4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.550068Z",
     "iopub.status.busy": "2024-08-17T07:52:49.549638Z",
     "iopub.status.idle": "2024-08-17T07:52:49.556632Z",
     "shell.execute_reply": "2024-08-17T07:52:49.555577Z"
    },
    "papermill": {
     "duration": 0.021226,
     "end_time": "2024-08-17T07:52:49.558989",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.537763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1168, 7)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "15b38cef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.580398Z",
     "iopub.status.busy": "2024-08-17T07:52:49.580016Z",
     "iopub.status.idle": "2024-08-17T07:52:49.590059Z",
     "shell.execute_reply": "2024-08-17T07:52:49.588897Z"
    },
    "papermill": {
     "duration": 0.023636,
     "end_time": "2024-08-17T07:52:49.592474",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.568838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_Predictions\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define a model\n",
    "#leaf nodes are the decisions, depth is the maxiumum splits it needs in order to come to the leaf node. Tree will stop growing at min sample size. Can parrelell compute here\n",
    "my_model = RandomForestRegressor(n_estimators=100, criterion=\"absolute_error\",min_samples_leaf=35, random_state=42) #our code here\n",
    "\n",
    "# Check your answer\n",
    "step_2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e4f7b76d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.615453Z",
     "iopub.status.busy": "2024-08-17T07:52:49.614346Z",
     "iopub.status.idle": "2024-08-17T07:52:49.619492Z",
     "shell.execute_reply": "2024-08-17T07:52:49.618394Z"
    },
    "papermill": {
     "duration": 0.019134,
     "end_time": "2024-08-17T07:52:49.621919",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.602785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#step_2.hint()\n",
    "#step_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3914645a",
   "metadata": {
    "papermill": {
     "duration": 0.010163,
     "end_time": "2024-08-17T07:52:49.642599",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.632436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the next code cell without changes.  The code fits the model to the training and validation data, and then generates test predictions that are saved to a CSV file.  These test predictions can be submitted directly to the competition!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "278ea11a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:49.665038Z",
     "iopub.status.busy": "2024-08-17T07:52:49.664598Z",
     "iopub.status.idle": "2024-08-17T07:52:52.173217Z",
     "shell.execute_reply": "2024-08-17T07:52:52.172155Z"
    },
    "papermill": {
     "duration": 2.523212,
     "end_time": "2024-08-17T07:52:52.176119",
     "exception": false,
     "start_time": "2024-08-17T07:52:49.652907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fit the model to the training data\n",
    "my_model.fit(X, y)\n",
    "\n",
    "# Generate test predictions\n",
    "preds_test = my_model.predict(X_test)\n",
    "\n",
    "# Save predictions in format used for competition scoring\n",
    "output = pd.DataFrame({'Id': X_test.index,\n",
    "                       'SalePrice': preds_test})\n",
    "output.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e2fe855",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:52.199262Z",
     "iopub.status.busy": "2024-08-17T07:52:52.198069Z",
     "iopub.status.idle": "2024-08-17T07:52:52.537282Z",
     "shell.execute_reply": "2024-08-17T07:52:52.535971Z"
    },
    "papermill": {
     "duration": 0.353607,
     "end_time": "2024-08-17T07:52:52.540037",
     "exception": false,
     "start_time": "2024-08-17T07:52:52.186430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "importances = my_model.feature_importances_\n",
    "\n",
    "# Create a DataFrame to view the feature importance in a readable format\n",
    "feature_names = X.columns\n",
    "importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot the feature importances\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(importance_df['Feature'], importance_df['Importance'], color='royalblue')\n",
    "plt.xlabel('Feature Importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.title('Feature Importance in Random Forest')\n",
    "plt.gca().invert_yaxis()  # To have the most important feature at the top\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "69a98ae2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:52.563667Z",
     "iopub.status.busy": "2024-08-17T07:52:52.563253Z",
     "iopub.status.idle": "2024-08-17T07:52:52.570302Z",
     "shell.execute_reply": "2024-08-17T07:52:52.569088Z"
    },
    "papermill": {
     "duration": 0.021857,
     "end_time": "2024-08-17T07:52:52.572864",
     "exception": false,
     "start_time": "2024-08-17T07:52:52.551007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(292,)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_valid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ad578a0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:52.596657Z",
     "iopub.status.busy": "2024-08-17T07:52:52.596253Z",
     "iopub.status.idle": "2024-08-17T07:52:52.616366Z",
     "shell.execute_reply": "2024-08-17T07:52:52.615249Z"
    },
    "papermill": {
     "duration": 0.035229,
     "end_time": "2024-08-17T07:52:52.619192",
     "exception": false,
     "start_time": "2024-08-17T07:52:52.583963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regression Report\n",
      "-----------------\n",
      "Mean Absolute Error (MAE): 25849.18\n",
      "Mean Squared Error (MSE): 2254939087.19\n",
      "Root Mean Squared Error (RMSE): 47486.20\n",
      "R-squared (R²): 0.67\n"
     ]
    }
   ],
   "source": [
    "# Calculate metrics\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "import numpy as np\n",
    "y_pred=my_model.predict(X_valid)\n",
    "\n",
    "mae = mean_absolute_error(y_valid, y_pred)\n",
    "mse = mean_squared_error(y_valid, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "r2 = r2_score(y_valid, y_pred)\n",
    "\n",
    "# Print the regression report\n",
    "print(\"Regression Report\")\n",
    "print(\"-----------------\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\n",
    "print(f\"R-squared (R²): {r2:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7aed5091",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:52.644455Z",
     "iopub.status.busy": "2024-08-17T07:52:52.643273Z",
     "iopub.status.idle": "2024-08-17T07:52:52.981921Z",
     "shell.execute_reply": "2024-08-17T07:52:52.980671Z"
    },
    "papermill": {
     "duration": 0.353819,
     "end_time": "2024-08-17T07:52:52.984455",
     "exception": false,
     "start_time": "2024-08-17T07:52:52.630636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_valid, y_pred, edgecolor='k', alpha=0.7)\n",
    "plt.plot([min(y_valid), max(y_valid)], [min(y_pred), max(y_pred)], '--r', linewidth=2)  # Line of perfect prediction\n",
    "plt.xlabel('Actual Prices')\n",
    "plt.ylabel('Predicted Prices')\n",
    "plt.title('Predicted vs. Actual Prices')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e659ebfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-17T07:52:53.011520Z",
     "iopub.status.busy": "2024-08-17T07:52:53.011094Z",
     "iopub.status.idle": "2024-08-17T07:52:53.027176Z",
     "shell.execute_reply": "2024-08-17T07:52:53.025995Z"
    },
    "papermill": {
     "duration": 0.032931,
     "end_time": "2024-08-17T07:52:53.029707",
     "exception": false,
     "start_time": "2024-08-17T07:52:52.996776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>128362.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>179479.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>178303.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>177525.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>178060.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1454</th>\n",
       "      <td>2915</td>\n",
       "      <td>102579.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>2916</td>\n",
       "      <td>103628.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>2917</td>\n",
       "      <td>177637.110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>2918</td>\n",
       "      <td>165910.110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>2919</td>\n",
       "      <td>257380.985</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1459 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id   SalePrice\n",
       "0     1461  128362.750\n",
       "1     1462  179479.240\n",
       "2     1463  178303.100\n",
       "3     1464  177525.100\n",
       "4     1465  178060.945\n",
       "...    ...         ...\n",
       "1454  2915  102579.750\n",
       "1455  2916  103628.750\n",
       "1456  2917  177637.110\n",
       "1457  2918  165910.110\n",
       "1458  2919  257380.985\n",
       "\n",
       "[1459 rows x 2 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9357403f",
   "metadata": {
    "papermill": {
     "duration": 0.012352,
     "end_time": "2024-08-17T07:52:53.054820",
     "exception": false,
     "start_time": "2024-08-17T07:52:53.042468",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Submit your results\n",
    "\n",
    "Once you have successfully completed Step 2, you're ready to submit your results to the leaderboard!  First, you'll need to join the competition if you haven't already.  So open a new window by clicking on [this link](https://www.kaggle.com/c/home-data-for-ml-course).  Then click on the **Join Competition** button.  _(If you see a \"Submit Predictions\" button instead of a \"Join Competition\" button, you have already joined the competition, and don't need to do so again.)_\n",
    "\n",
    "Next, follow the instructions below:\n",
    "1. Begin by clicking on the **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n",
    "2. Ensure that the **Save and Run All** option is selected, and then click on the **Save** button.\n",
    "3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n",
    "4. Click on the **Data** tab near the top of the screen.  Then, click on the file you would like to submit, and click on the **Submit** button to submit your results to the leaderboard.\n",
    "\n",
    "You have now successfully submitted to the competition!\n",
    "\n",
    "If you want to keep working to improve your performance, select the **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d5d850c",
   "metadata": {
    "papermill": {
     "duration": 0.012363,
     "end_time": "2024-08-17T07:52:53.079916",
     "exception": false,
     "start_time": "2024-08-17T07:52:53.067553",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep going\n",
    "\n",
    "You've made your first model. But how can you quickly make it better?\n",
    "\n",
    "Learn how to improve your competition results by incorporating columns with **[missing values](https://www.kaggle.com/alexisbcook/missing-values)**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a69bee04",
   "metadata": {
    "papermill": {
     "duration": 0.012133,
     "end_time": "2024-08-17T07:52:53.104652",
     "exception": false,
     "start_time": "2024-08-17T07:52:53.092519",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intermediate-machine-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.69922,
   "end_time": "2024-08-17T07:52:53.740000",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-17T07:52:38.040780",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
